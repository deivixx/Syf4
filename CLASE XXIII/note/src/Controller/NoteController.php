<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use App\Entity\Note;
use Symfony\Component\HttpFoundation\Request;
use App\Form\NoteType;
use Symfony\Component\HttpFoundation\File\Exception\FileException;


class NoteController extends AbstractController
{
    /**
     * @Route("/home", name="note_home")
     */
    public function home()
    {
        return $this->render('note/home.html.twig');
    }
    
    
    
    /**
     * @Route("/notes", name="note_index")
     */
    public function noteIndex()
    {
        return $this->render('note/index.html.twig');
    }


    /**
     * @Route("/notes/new", name="note_new")
     */
    public function new(Request $request)
    {
        // Creamos objeto Note
        $note = new Note();
        
        $form = $this->createForm(NoteType::class, $note);

        $form->handleRequest($request);

        
        if ($form->isSubmitted() && $form->isValid()) {
            // $form->getData() Contiene los datos enviados
            $note = $form->getData();
            
            $file = $note->getAttachedFile();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            
            try {
                $file->move(
                    $this->getParameter('attached_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $note->setAttachedFile($fileName);


            
            // ... Aquí podríamos añadir la nota a bbdd
            
            // Redirigimos a una pantalla diferente
            //return $this->redirectToRoute('note_home');
        }
                
        return $this->render('note/new.html.twig', [
            'form' => $form->createView(),'note'=>$note
        ]);
    }
    
    
    
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
